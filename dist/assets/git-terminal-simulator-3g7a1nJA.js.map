{"version":3,"file":"git-terminal-simulator-3g7a1nJA.js","sources":["../../src/js/components/git-terminal-simulator.js"],"sourcesContent":["/**\n * Interactive Git Terminal Simulator Component\n * Provides a safe environment for practicing Git commands\n */\nimport { LitElement, html, css } from 'lit';\n\nexport class GitTerminalSimulator extends LitElement {\n    static properties = {\n        currentDirectory: { type: String },\n        commandHistory: { type: Array },\n        currentInput: { type: String },\n        isProcessing: { type: Boolean },\n        gitInitialized: { type: Boolean },\n        files: { type: Array },\n        stagedFiles: { type: Array },\n        commits: { type: Array },\n        currentBranch: { type: String },\n        branches: { type: Array },\n        suggestedCommands: { type: Array },\n        tutorialMode: { type: Boolean },\n        currentStep: { type: Number },\n        showHelp: { type: Boolean }\n    };\n\n    constructor() {\n        super();\n        this.currentDirectory = '/my-project';\n        this.commandHistory = [\n            { command: 'Welcome to Git Terminal Simulator', output: 'Practice Git commands safely!', type: 'system' }\n        ];\n        this.currentInput = '';\n        this.isProcessing = false;\n        this.gitInitialized = false;\n        this.files = [];\n        this.stagedFiles = [];\n        this.commits = [];\n        this.currentBranch = 'main';\n        this.branches = ['main'];\n        this.suggestedCommands = this.getBasicCommands();\n        this.tutorialMode = false;\n        this.currentStep = 0;\n        this.showHelp = false;\n\n        this.tutorialSteps = [\n            {\n                instruction: 'Initialize a Git repository',\n                command: 'git init',\n                hint: 'This creates a new Git repository in the current directory'\n            },\n            {\n                instruction: 'Create a file and add some content',\n                command: 'echo \"Hello World\" > README.md',\n                hint: 'This creates a new file called README.md'\n            },\n            {\n                instruction: 'Check the repository status',\n                command: 'git status',\n                hint: 'This shows which files are tracked, modified, or staged'\n            },\n            {\n                instruction: 'Add the file to staging area',\n                command: 'git add README.md',\n                hint: 'This stages the file for the next commit'\n            },\n            {\n                instruction: 'Commit your changes',\n                command: 'git commit -m \"Initial commit\"',\n                hint: 'This saves your changes to the repository history'\n            }\n        ];\n    }\n\n    static styles = css`\n        :host {\n            display: block;\n            font-family: var(--font-mono);\n        }\n\n        .terminal-container {\n            background: #1e1e1e;\n            color: #d4d4d4;\n            border-radius: var(--radius-lg);\n            overflow: hidden;\n            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);\n        }\n\n        .terminal-header {\n            background: #2d2d2d;\n            padding: var(--space-md);\n            display: flex;\n            align-items: center;\n            gap: var(--space-sm);\n            border-bottom: 1px solid #404040;\n        }\n\n        .terminal-button {\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n        }\n\n        .close { background: #ff5f57; }\n        .minimize { background: #ffbd2e; }\n        .maximize { background: #28ca42; }\n\n        .terminal-title {\n            margin-left: var(--space-md);\n            font-size: var(--text-sm);\n            color: #a0a0a0;\n        }\n\n        .terminal-body {\n            height: 400px;\n            overflow-y: auto;\n            padding: var(--space-md);\n        }\n\n        .terminal-output {\n            margin-bottom: var(--space-md);\n        }\n\n        .command-line {\n            display: flex;\n            margin-bottom: var(--space-xs);\n            align-items: flex-start;\n        }\n\n        .prompt {\n            color: #98c379;\n            margin-right: var(--space-sm);\n            font-weight: 600;\n            flex-shrink: 0;\n        }\n\n        .command {\n            color: #d4d4d4;\n            word-break: break-all;\n        }\n\n        .output {\n            margin-left: var(--space-lg);\n            margin-bottom: var(--space-sm);\n            white-space: pre-line;\n        }\n\n        .output.success {\n            color: #98c379;\n        }\n\n        .output.error {\n            color: #e06c75;\n        }\n\n        .output.system {\n            color: #61afef;\n        }\n\n        .output.warning {\n            color: #e5c07b;\n        }\n\n        .input-container {\n            display: flex;\n            align-items: center;\n            border-top: 1px solid #404040;\n            padding: var(--space-md);\n            background: #252526;\n        }\n\n        .input-prompt {\n            color: #98c379;\n            margin-right: var(--space-sm);\n            font-weight: 600;\n        }\n\n        .input-field {\n            flex: 1;\n            background: none;\n            border: none;\n            color: #d4d4d4;\n            font-family: inherit;\n            font-size: var(--text-sm);\n            outline: none;\n            caret-color: #d4d4d4;\n        }\n\n        .controls {\n            padding: var(--space-md);\n            background: var(--card-bg);\n            border-top: 1px solid var(--border-color);\n            display: flex;\n            gap: var(--space-md);\n            flex-wrap: wrap;\n            align-items: center;\n        }\n\n        .btn {\n            background: var(--primary);\n            color: white;\n            border: none;\n            padding: var(--space-sm) var(--space-md);\n            border-radius: var(--radius-sm);\n            font-size: var(--text-sm);\n            cursor: pointer;\n            transition: background 0.2s;\n        }\n\n        .btn:hover {\n            background: var(--primary-dark);\n        }\n\n        .btn.secondary {\n            background: var(--secondary);\n        }\n\n        .btn.secondary:hover {\n            background: var(--secondary-dark);\n        }\n\n        .suggested-commands {\n            display: flex;\n            gap: var(--space-xs);\n            flex-wrap: wrap;\n            margin-top: var(--space-sm);\n        }\n\n        .command-suggestion {\n            background: #404040;\n            color: #d4d4d4;\n            padding: var(--space-xs) var(--space-sm);\n            border-radius: var(--radius-sm);\n            font-size: var(--text-xs);\n            cursor: pointer;\n            border: none;\n            transition: background 0.2s;\n        }\n\n        .command-suggestion:hover {\n            background: #505050;\n        }\n\n        .tutorial-panel {\n            background: var(--card-bg);\n            border: 1px solid var(--border-color);\n            border-radius: var(--radius-lg);\n            padding: var(--space-lg);\n            margin-bottom: var(--space-md);\n        }\n\n        .tutorial-step {\n            display: flex;\n            align-items: center;\n            gap: var(--space-md);\n            margin-bottom: var(--space-md);\n        }\n\n        .step-number {\n            background: var(--primary);\n            color: white;\n            width: 24px;\n            height: 24px;\n            border-radius: 50%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: var(--text-sm);\n            font-weight: 600;\n        }\n\n        .step-content h4 {\n            margin: 0 0 var(--space-xs) 0;\n            color: var(--text);\n        }\n\n        .step-content p {\n            margin: 0;\n            color: var(--text-secondary);\n            font-size: var(--text-sm);\n        }\n\n        .help-panel {\n            background: var(--card-bg);\n            border: 1px solid var(--border-color);\n            border-radius: var(--radius-lg);\n            padding: var(--space-lg);\n            margin-top: var(--space-md);\n        }\n\n        .help-commands {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: var(--space-md);\n            margin-top: var(--space-md);\n        }\n\n        .help-item {\n            background: var(--bg);\n            padding: var(--space-md);\n            border-radius: var(--radius-sm);\n            border: 1px solid var(--border-color);\n        }\n\n        .help-item code {\n            background: var(--code-bg);\n            color: var(--code-text);\n            padding: var(--space-xs) var(--space-sm);\n            border-radius: var(--radius-xs);\n            font-size: var(--text-xs);\n        }\n\n        @media (max-width: 768px) {\n            .terminal-body {\n                height: 300px;\n            }\n            \n            .controls {\n                flex-direction: column;\n                align-items: stretch;\n            }\n            \n            .suggested-commands {\n                justify-content: center;\n            }\n        }\n    `;\n\n    getBasicCommands() {\n        return [\n            'git init',\n            'git status',\n            'git add .',\n            'git commit -m \"message\"',\n            'git log',\n            'git diff',\n            'ls',\n            'clear'\n        ];\n    }\n\n    handleKeyPress(e) {\n        if (e.key === 'Enter' && !this.isProcessing) {\n            this.executeCommand();\n        }\n    }\n\n    handleInputChange(e) {\n        this.currentInput = e.target.value;\n    }\n\n    executeCommand() {\n        if (!this.currentInput.trim() || this.isProcessing) return;\n\n        const command = this.currentInput.trim();\n        this.isProcessing = true;\n\n        // Add command to history\n        this.commandHistory = [...this.commandHistory, {\n            command,\n            type: 'command',\n            directory: this.currentDirectory\n        }];\n\n        // Process command\n        setTimeout(() => {\n            this.processCommand(command);\n            this.currentInput = '';\n            this.isProcessing = false;\n            this.requestUpdate();\n            \n            // Scroll to bottom\n            setTimeout(() => {\n                const terminal = this.shadowRoot.querySelector('.terminal-body');\n                terminal.scrollTop = terminal.scrollHeight;\n            }, 100);\n        }, 300);\n\n        this.requestUpdate();\n    }\n\n    processCommand(command) {\n        const parts = command.trim().split(' ');\n        const cmd = parts[0];\n        const args = parts.slice(1);\n\n        let output = '';\n        let type = 'output';\n\n        switch (cmd) {\n            case 'git':\n                ({ output, type } = this.processGitCommand(args));\n                break;\n            case 'ls':\n                output = this.listFiles();\n                break;\n            case 'echo':\n                output = this.echoCommand(args);\n                break;\n            case 'cat':\n                output = this.catCommand(args);\n                break;\n            case 'clear':\n                this.commandHistory = [];\n                return;\n            case 'help':\n                this.showHelp = !this.showHelp;\n                output = 'Available commands listed below.';\n                break;\n            case 'tutorial':\n                this.toggleTutorial();\n                output = this.tutorialMode ? 'Tutorial mode enabled' : 'Tutorial mode disabled';\n                break;\n            default:\n                output = `Command not found: ${cmd}\\nType 'help' for available commands.`;\n                type = 'error';\n        }\n\n        if (output) {\n            this.commandHistory = [...this.commandHistory, { output, type }];\n        }\n\n        // Update tutorial progress\n        if (this.tutorialMode && this.currentStep < this.tutorialSteps.length) {\n            const expectedCommand = this.tutorialSteps[this.currentStep].command;\n            if (command === expectedCommand) {\n                this.currentStep++;\n                if (this.currentStep < this.tutorialSteps.length) {\n                    this.commandHistory = [...this.commandHistory, {\n                        output: `✅ Great! Step ${this.currentStep} completed.`,\n                        type: 'success'\n                    }];\n                } else {\n                    this.commandHistory = [...this.commandHistory, {\n                        output: '🎉 Tutorial completed! You\\'ve learned the basic Git workflow.',\n                        type: 'success'\n                    }];\n                    this.tutorialMode = false;\n                }\n            }\n        }\n    }\n\n    processGitCommand(args) {\n        if (args.length === 0) {\n            return {\n                output: 'usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]\\n           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\\n           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]\\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\\n           [--super-prefix=<path>] [--config-env=<name>=<envvar>]\\n           <command> [<args>]',\n                type: 'output'\n            };\n        }\n\n        const subcommand = args[0];\n\n        switch (subcommand) {\n            case 'init':\n                return this.gitInit();\n            case 'status':\n                return this.gitStatus();\n            case 'add':\n                return this.gitAdd(args.slice(1));\n            case 'commit':\n                return this.gitCommit(args.slice(1));\n            case 'log':\n                return this.gitLog();\n            case 'diff':\n                return this.gitDiff();\n            case 'branch':\n                return this.gitBranch(args.slice(1));\n            case 'checkout':\n                return this.gitCheckout(args.slice(1));\n            case 'merge':\n                return this.gitMerge(args.slice(1));\n            default:\n                return {\n                    output: `git: '${subcommand}' is not a git command. See 'git --help'.`,\n                    type: 'error'\n                };\n        }\n    }\n\n    gitInit() {\n        if (this.gitInitialized) {\n            return {\n                output: 'Reinitialized existing Git repository in ' + this.currentDirectory + '/.git/',\n                type: 'output'\n            };\n        }\n        \n        this.gitInitialized = true;\n        return {\n            output: 'Initialized empty Git repository in ' + this.currentDirectory + '/.git/',\n            type: 'success'\n        };\n    }\n\n    gitStatus() {\n        if (!this.gitInitialized) {\n            return {\n                output: 'fatal: not a git repository (or any of the parent directories): .git',\n                type: 'error'\n            };\n        }\n\n        let output = `On branch ${this.currentBranch}\\n`;\n        \n        if (this.commits.length === 0) {\n            output += '\\nNo commits yet\\n';\n        }\n\n        const unstagedFiles = this.files.filter(f => !this.stagedFiles.includes(f.name));\n        const untrackedFiles = this.files.filter(f => !f.tracked);\n\n        if (this.stagedFiles.length > 0) {\n            output += '\\nChanges to be committed:\\n  (use \"git reset HEAD <file>...\" to unstage)\\n';\n            this.stagedFiles.forEach(file => {\n                output += `\\tnew file:   ${file}\\n`;\n            });\n        }\n\n        if (unstagedFiles.length > 0) {\n            output += '\\nChanges not staged for commit:\\n  (use \"git add <file>...\" to update what will be committed)\\n  (use \"git checkout -- <file>...\" to discard changes)\\n';\n            unstagedFiles.forEach(file => {\n                if (file.tracked) {\n                    output += `\\tmodified:   ${file.name}\\n`;\n                }\n            });\n        }\n\n        if (untrackedFiles.length > 0) {\n            output += '\\nUntracked files:\\n  (use \"git add <file>...\" to include in what will be committed)\\n';\n            untrackedFiles.forEach(file => {\n                output += `\\t${file.name}\\n`;\n            });\n        }\n\n        if (this.stagedFiles.length === 0 && unstagedFiles.length === 0 && untrackedFiles.length === 0) {\n            output += '\\nnothing to commit, working tree clean';\n        }\n\n        return { output, type: 'output' };\n    }\n\n    gitAdd(args) {\n        if (!this.gitInitialized) {\n            return {\n                output: 'fatal: not a git repository (or any of the parent directories): .git',\n                type: 'error'\n            };\n        }\n\n        if (args.length === 0) {\n            return {\n                output: 'Nothing specified, nothing added.\\nMaybe you wanted to say \\'git add .\\'?',\n                type: 'error'\n            };\n        }\n\n        const target = args[0];\n        \n        if (target === '.') {\n            // Add all files\n            this.files.forEach(file => {\n                if (!this.stagedFiles.includes(file.name)) {\n                    this.stagedFiles.push(file.name);\n                }\n                file.tracked = true;\n            });\n            return { output: '', type: 'success' };\n        } else {\n            // Add specific file\n            const file = this.files.find(f => f.name === target);\n            if (!file) {\n                return {\n                    output: `fatal: pathspec '${target}' did not match any files`,\n                    type: 'error'\n                };\n            }\n            \n            if (!this.stagedFiles.includes(target)) {\n                this.stagedFiles.push(target);\n            }\n            file.tracked = true;\n            return { output: '', type: 'success' };\n        }\n    }\n\n    gitCommit(args) {\n        if (!this.gitInitialized) {\n            return {\n                output: 'fatal: not a git repository (or any of the parent directories): .git',\n                type: 'error'\n            };\n        }\n\n        if (this.stagedFiles.length === 0) {\n            return {\n                output: 'On branch main\\nnothing to commit, working tree clean',\n                type: 'output'\n            };\n        }\n\n        let message = 'Update files';\n        \n        // Parse -m flag\n        const mIndex = args.indexOf('-m');\n        if (mIndex !== -1 && args[mIndex + 1]) {\n            message = args[mIndex + 1].replace(/['\"]/g, '');\n        }\n\n        // Create commit\n        const commit = {\n            hash: this.generateCommitHash(),\n            message,\n            files: [...this.stagedFiles],\n            timestamp: new Date().toISOString()\n        };\n\n        this.commits.push(commit);\n        this.stagedFiles = [];\n\n        return {\n            output: `[${this.currentBranch} ${commit.hash.substring(0, 7)}] ${message}\\n ${commit.files.length} file${commit.files.length > 1 ? 's' : ''} changed`,\n            type: 'success'\n        };\n    }\n\n    gitLog() {\n        if (!this.gitInitialized) {\n            return {\n                output: 'fatal: not a git repository (or any of the parent directories): .git',\n                type: 'error'\n            };\n        }\n\n        if (this.commits.length === 0) {\n            return {\n                output: 'fatal: your current branch \\'main\\' does not have any commits yet',\n                type: 'error'\n            };\n        }\n\n        let output = '';\n        this.commits.slice().reverse().forEach((commit, index) => {\n            if (index > 0) output += '\\n';\n            output += `commit ${commit.hash}\\n`;\n            output += `Date: ${new Date(commit.timestamp).toDateString()}\\n\\n`;\n            output += `    ${commit.message}\\n`;\n        });\n\n        return { output, type: 'output' };\n    }\n\n    gitDiff() {\n        if (!this.gitInitialized) {\n            return {\n                output: 'fatal: not a git repository (or any of the parent directories): .git',\n                type: 'error'\n            };\n        }\n\n        // Simple diff simulation\n        const unstagedFiles = this.files.filter(f => f.tracked && !this.stagedFiles.includes(f.name));\n        \n        if (unstagedFiles.length === 0) {\n            return { output: '', type: 'output' };\n        }\n\n        let output = '';\n        unstagedFiles.forEach(file => {\n            output += `diff --git a/${file.name} b/${file.name}\\n`;\n            output += `index 1234567..abcdefg 100644\\n`;\n            output += `--- a/${file.name}\\n`;\n            output += `+++ b/${file.name}\\n`;\n            output += `@@ -1,1 +1,2 @@\\n`;\n            output += ` ${file.content}\\n`;\n            output += `+Modified content\\n`;\n        });\n\n        return { output, type: 'output' };\n    }\n\n    gitBranch(args) {\n        if (!this.gitInitialized) {\n            return {\n                output: 'fatal: not a git repository (or any of the parent directories): .git',\n                type: 'error'\n            };\n        }\n\n        if (args.length === 0) {\n            let output = '';\n            this.branches.forEach(branch => {\n                output += (branch === this.currentBranch ? '* ' : '  ') + branch + '\\n';\n            });\n            return { output, type: 'output' };\n        }\n\n        const branchName = args[0];\n        if (!this.branches.includes(branchName)) {\n            this.branches.push(branchName);\n            return { output: '', type: 'success' };\n        }\n\n        return {\n            output: `fatal: A branch named '${branchName}' already exists.`,\n            type: 'error'\n        };\n    }\n\n    gitCheckout(args) {\n        if (!this.gitInitialized) {\n            return {\n                output: 'fatal: not a git repository (or any of the parent directories): .git',\n                type: 'error'\n            };\n        }\n\n        if (args.length === 0) {\n            return {\n                output: 'You are on branch \\'' + this.currentBranch + '\\'',\n                type: 'output'\n            };\n        }\n\n        if (args[0] === '-b' && args[1]) {\n            const branchName = args[1];\n            if (!this.branches.includes(branchName)) {\n                this.branches.push(branchName);\n                this.currentBranch = branchName;\n                return {\n                    output: `Switched to a new branch '${branchName}'`,\n                    type: 'success'\n                };\n            }\n            return {\n                output: `fatal: A branch named '${branchName}' already exists.`,\n                type: 'error'\n            };\n        }\n\n        const branchName = args[0];\n        if (this.branches.includes(branchName)) {\n            this.currentBranch = branchName;\n            return {\n                output: `Switched to branch '${branchName}'`,\n                type: 'success'\n            };\n        }\n\n        return {\n            output: `error: pathspec '${branchName}' did not match any file(s) known to git`,\n            type: 'error'\n        };\n    }\n\n    gitMerge(args) {\n        if (!this.gitInitialized) {\n            return {\n                output: 'fatal: not a git repository (or any of the parent directories): .git',\n                type: 'error'\n            };\n        }\n\n        if (args.length === 0) {\n            return {\n                output: 'fatal: No merge head specified.',\n                type: 'error'\n            };\n        }\n\n        const branchName = args[0];\n        if (!this.branches.includes(branchName)) {\n            return {\n                output: `fatal: '${branchName}' - not something we can merge`,\n                type: 'error'\n            };\n        }\n\n        if (branchName === this.currentBranch) {\n            return {\n                output: `Already on '${branchName}'`,\n                type: 'output'\n            };\n        }\n\n        return {\n            output: `Merge made by the 'recursive' strategy.\\nFast-forward`,\n            type: 'success'\n        };\n    }\n\n    listFiles() {\n        if (this.files.length === 0) {\n            return '';\n        }\n        return this.files.map(f => f.name).join('\\n');\n    }\n\n    echoCommand(args) {\n        const text = args.join(' ');\n        \n        // Handle file creation with >\n        if (text.includes(' > ')) {\n            const [content, filename] = text.split(' > ');\n            const cleanContent = content.replace(/['\"]/g, '');\n            const cleanFilename = filename.trim();\n            \n            // Add or update file\n            const existingFile = this.files.find(f => f.name === cleanFilename);\n            if (existingFile) {\n                existingFile.content = cleanContent;\n            } else {\n                this.files.push({\n                    name: cleanFilename,\n                    content: cleanContent,\n                    tracked: false\n                });\n            }\n            \n            return '';\n        }\n        \n        return text.replace(/['\"]/g, '');\n    }\n\n    catCommand(args) {\n        if (args.length === 0) {\n            return 'cat: missing file operand';\n        }\n\n        const filename = args[0];\n        const file = this.files.find(f => f.name === filename);\n        \n        if (!file) {\n            return `cat: ${filename}: No such file or directory`;\n        }\n        \n        return file.content;\n    }\n\n    generateCommitHash() {\n        return Array.from({length: 40}, () => Math.floor(Math.random() * 16).toString(16)).join('');\n    }\n\n    clearTerminal() {\n        this.commandHistory = [];\n        this.requestUpdate();\n    }\n\n    toggleTutorial() {\n        this.tutorialMode = !this.tutorialMode;\n        this.currentStep = 0;\n    }\n\n    useCommand(command) {\n        this.currentInput = command;\n        const input = this.shadowRoot.querySelector('.input-field');\n        input.focus();\n    }\n\n    render() {\n        return html`\n            ${this.tutorialMode ? html`\n                <div class=\"tutorial-panel\">\n                    <h3>📚 Git Tutorial Mode</h3>\n                    ${this.currentStep < this.tutorialSteps.length ? html`\n                        <div class=\"tutorial-step\">\n                            <div class=\"step-number\">${this.currentStep + 1}</div>\n                            <div class=\"step-content\">\n                                <h4>${this.tutorialSteps[this.currentStep].instruction}</h4>\n                                <p>Try: <code>${this.tutorialSteps[this.currentStep].command}</code></p>\n                                <p><em>${this.tutorialSteps[this.currentStep].hint}</em></p>\n                            </div>\n                        </div>\n                    ` : html`\n                        <div class=\"tutorial-step\">\n                            <div class=\"step-number\">✅</div>\n                            <div class=\"step-content\">\n                                <h4>Tutorial Completed!</h4>\n                                <p>You've mastered the basic Git workflow. Practice more commands!</p>\n                            </div>\n                        </div>\n                    `}\n                </div>\n            ` : ''}\n\n            <div class=\"terminal-container\">\n                <div class=\"terminal-header\">\n                    <div class=\"terminal-button close\"></div>\n                    <div class=\"terminal-button minimize\"></div>\n                    <div class=\"terminal-button maximize\"></div>\n                    <div class=\"terminal-title\">Git Terminal Simulator</div>\n                </div>\n                \n                <div class=\"terminal-body\">\n                    ${this.commandHistory.map(entry => html`\n                        <div class=\"terminal-output\">\n                            ${entry.command ? html`\n                                <div class=\"command-line\">\n                                    <span class=\"prompt\">${entry.directory || this.currentDirectory}$</span>\n                                    <span class=\"command\">${entry.command}</span>\n                                </div>\n                            ` : ''}\n                            ${entry.output ? html`\n                                <div class=\"output ${entry.type || 'output'}\">${entry.output}</div>\n                            ` : ''}\n                        </div>\n                    `)}\n                </div>\n\n                <div class=\"input-container\">\n                    <span class=\"input-prompt\">${this.currentDirectory}$</span>\n                    <input \n                        class=\"input-field\" \n                        .value=\"${this.currentInput}\"\n                        @input=\"${this.handleInputChange}\"\n                        @keypress=\"${this.handleKeyPress}\"\n                        ?disabled=\"${this.isProcessing}\"\n                        placeholder=\"Type a command...\"\n                        autocomplete=\"off\"\n                    />\n                </div>\n            </div>\n\n            <div class=\"controls\">\n                <button class=\"btn\" @click=\"${this.executeCommand}\" ?disabled=\"${this.isProcessing}\">\n                    Execute\n                </button>\n                <button class=\"btn secondary\" @click=\"${this.clearTerminal}\">\n                    Clear\n                </button>\n                <button class=\"btn secondary\" @click=\"${this.toggleTutorial}\">\n                    ${this.tutorialMode ? 'Exit Tutorial' : 'Start Tutorial'}\n                </button>\n                <button class=\"btn secondary\" @click=\"${() => this.showHelp = !this.showHelp}\">\n                    ${this.showHelp ? 'Hide Help' : 'Show Help'}\n                </button>\n            </div>\n\n            <div class=\"suggested-commands\">\n                ${this.suggestedCommands.map(cmd => html`\n                    <button class=\"command-suggestion\" @click=\"${() => this.useCommand(cmd)}\">\n                        ${cmd}\n                    </button>\n                `)}\n            </div>\n\n            ${this.showHelp ? html`\n                <div class=\"help-panel\">\n                    <h3>Available Commands</h3>\n                    <div class=\"help-commands\">\n                        <div class=\"help-item\">\n                            <code>git init</code>\n                            <p>Initialize a Git repository</p>\n                        </div>\n                        <div class=\"help-item\">\n                            <code>git status</code>\n                            <p>Show repository status</p>\n                        </div>\n                        <div class=\"help-item\">\n                            <code>git add [file]</code>\n                            <p>Stage files for commit</p>\n                        </div>\n                        <div class=\"help-item\">\n                            <code>git commit -m \"msg\"</code>\n                            <p>Create a commit</p>\n                        </div>\n                        <div class=\"help-item\">\n                            <code>git log</code>\n                            <p>View commit history</p>\n                        </div>\n                        <div class=\"help-item\">\n                            <code>git branch [name]</code>\n                            <p>List or create branches</p>\n                        </div>\n                        <div class=\"help-item\">\n                            <code>echo \"text\" > file</code>\n                            <p>Create a file with content</p>\n                        </div>\n                        <div class=\"help-item\">\n                            <code>ls</code>\n                            <p>List files in directory</p>\n                        </div>\n                    </div>\n                </div>\n            ` : ''}\n        `;\n    }\n}\n\ncustomElements.define('git-terminal-simulator', GitTerminalSimulator);"],"names":["GitTerminalSimulator","LitElement","e","command","terminal","parts","cmd","args","output","type","expectedCommand","subcommand","unstagedFiles","f","untrackedFiles","file","target","message","mIndex","commit","index","branch","branchName","text","content","filename","cleanContent","cleanFilename","existingFile","html","entry","__publicField","css"],"mappings":"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"}